# Generated by Django 3.2.12 on 2022-03-03 05:09

import boranga.components.organisations.models
import ckeditor.fields
import datetime
import dirtyfields.dirtyfields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AmendmentReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=125, verbose_name='Reason')),
            ],
            options={
                'verbose_name': 'Application Amendment Reason',
                'verbose_name_plural': 'Application Amendment Reasons',
            },
        ),
        migrations.CreateModel(
            name='ApplicationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('visible', models.BooleanField(default=True)),
                ('application_fee', models.DecimalField(decimal_places=2, max_digits=6, null=True, verbose_name='Application Fee')),
                ('oracle_code_application', models.CharField(max_length=50)),
                ('oracle_code_licence', models.CharField(max_length=50)),
                ('is_gst_exempt', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ChecklistQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('list_type', models.CharField(choices=[('assessor_list', 'Assessor Checklist'), ('referral_list', 'Referral Checklist')], default='assessor_list', max_length=30, verbose_name='Checklist type')),
                ('answer_type', models.CharField(choices=[('yes_no', 'Yes/No type'), ('free_text', 'Free text type')], default='yes_no', max_length=30, verbose_name='Answer type')),
                ('obsolete', models.BooleanField(default=False)),
                ('order', models.PositiveSmallIntegerField(default=1)),
                ('application_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='boranga.applicationtype')),
            ],
        ),
        migrations.CreateModel(
            name='CommunicationsLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to', models.TextField(blank=True, verbose_name='To')),
                ('fromm', models.CharField(blank=True, max_length=200, verbose_name='From')),
                ('cc', models.TextField(blank=True, verbose_name='cc')),
                ('type', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone Call'), ('mail', 'Mail'), ('person', 'In Person'), ('onhold', 'On Hold'), ('onhold_remove', 'Remove On Hold'), ('with_qaofficer', 'With QA Officer'), ('with_qaofficer_completed', 'QA Officer Completed'), ('referral_complete', 'Referral Completed')], default='email', max_length=35)),
                ('reference', models.CharField(blank=True, max_length=100)),
                ('subject', models.CharField(blank=True, max_length=200, verbose_name='Subject / Description')),
                ('text', models.TextField(blank=True)),
                ('customer', models.IntegerField()),
                ('staff', models.IntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConservationCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='None', max_length=64)),
                ('label', models.CharField(default='None', max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='ConservationChangeCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='None', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='ConservationCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='ConservationList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='None', max_length=64)),
                ('label', models.CharField(default='None', max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=32)),
                ('last_name', models.CharField(max_length=32)),
                ('role', models.CharField(max_length=32)),
                ('phone', models.CharField(max_length=32)),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('PHS', 'Perth Hills'), ('SWC', 'Swan Coastal'), ('BWD', 'Blackwood'), ('WTN', 'Wellington'), ('DON', 'Donnelly'), ('FRK', 'Frankland'), ('ALB', 'Albany'), ('ESP', 'Esperance'), ('EKM', 'East Kimberley'), ('WKM', 'West Kimberley'), ('EXM', 'Exmouth'), ('PIL', 'Pilbara'), ('KAL', 'Kalgoorlie'), ('GER', 'Geraldton'), ('MOR', 'Moora'), ('SHB', 'Shark Bay'), ('GSN', 'Great Southern'), ('CWB', 'Central Wheatbelt'), ('SWB', 'Southern Wheatbelt')], max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='None', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(choices=[('credit_facility_link', 'Credit Facility Link'), ('deed_poll', 'Deed poll'), ('deed_poll_filming', 'Deed poll Filming'), ('deed_poll_event', 'Deed poll Event'), ('online_training_document', 'Online Training Document'), ('park_finder_link', 'Park Finder Link'), ('fees_and_charges', 'Fees and charges link'), ('event_fees_and_charges', 'Event Fees and charges link'), ('commercial_filming_handbook', 'Commercial Filming Handbook link'), ('park_stay_link', 'Park Stay Link'), ('event_traffic_code_of_practice', 'Event traffic code of practice'), ('trail_section_map', 'Trail section map'), ('dwer_application_form', 'DWER Application Form')], max_length=255)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Global Settings',
            },
        ),
        migrations.CreateModel(
            name='GroupType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('flora', 'Flora'), ('fauna', 'Fauna'), ('community', 'Community')], default=('fauna', 'Fauna'), max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='NameAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='None', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='OracleCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_type', models.CharField(choices=[('Commercial operations', 'Commercial operations'), ('Filming', 'Filming'), ('Event', 'Event')], default='Commercial operations', max_length=64, verbose_name='Application Type')),
                ('code', models.CharField(blank=True, max_length=50)),
                ('archive_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation', models.IntegerField()),
                ('delegates', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, size=None)),
                ('admin_pin_one', models.CharField(blank=True, max_length=50)),
                ('admin_pin_two', models.CharField(blank=True, max_length=50)),
                ('user_pin_one', models.CharField(blank=True, max_length=50)),
                ('user_pin_two', models.CharField(blank=True, max_length=50)),
                ('bpay_allowed', models.BooleanField(default=False, verbose_name='BPAY Allowed')),
                ('monthly_invoicing_allowed', models.BooleanField(default=False)),
                ('monthly_invoicing_period', models.SmallIntegerField(default=0, verbose_name='Monthly Invoicing Period (in #days from beginning of the following month)')),
                ('monthly_payment_due_period', models.SmallIntegerField(default=20, verbose_name='Monthly Payment Due Period (in #days from Invoicing Date)')),
                ('apply_application_discount', models.BooleanField(default=False)),
                ('application_discount', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('apply_licence_discount', models.BooleanField(default=False)),
                ('licence_discount', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('event_training_completed', models.BooleanField(default=False)),
                ('event_training_date', models.DateField(blank=True, null=True)),
                ('charge_once_per_year', models.DateField(blank=True, null=True, verbose_name='Charge Application Fee once per year from given start date (Charge always if null)')),
                ('last_event_application_fee_date', models.DateField(blank=True, null=True, verbose_name='The last date a fee was charged for an Eventi Application')),
                ('max_num_months_ahead', models.SmallIntegerField(default=0, verbose_name='Maximum number of months ahead an Event can be booked (Any if equal to zero)')),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationAccessGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('members', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, size=None)),
            ],
            options={
                'verbose_name_plural': 'Organisation access group',
            },
        ),
        migrations.CreateModel(
            name='OrganisationContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('active', 'Active'), ('declined', 'Declined'), ('unlinked', 'Unlinked'), ('suspended', 'Suspended'), ('contact_form', 'ContactForm')], default='draft', max_length=40, verbose_name='Status')),
                ('user_role', models.CharField(choices=[('organisation_admin', 'Organisation Admin'), ('organisation_user', 'Organisation User'), ('consultant', 'Consultant')], default='organisation_user', max_length=40, verbose_name='Role')),
                ('is_admin', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254)),
                ('first_name', models.CharField(max_length=128, verbose_name='Given name(s)')),
                ('last_name', models.CharField(max_length=128)),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='phone number')),
                ('mobile_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='mobile number')),
                ('fax_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='fax number')),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='boranga.organisation')),
            ],
            options={
                'unique_together': {('organisation', 'email')},
            },
        ),
        migrations.CreateModel(
            name='OrganisationRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('abn', models.CharField(blank=True, max_length=50, null=True, verbose_name='ABN')),
                ('requester', models.IntegerField()),
                ('assigned_officer', models.IntegerField()),
                ('identification', models.FileField(blank=True, max_length=512, null=True, upload_to='organisation/requests/%Y/%m/%d')),
                ('status', models.CharField(choices=[('with_assessor', 'With Assessor'), ('approved', 'Approved'), ('declined', 'Declined')], default='with_assessor', max_length=100)),
                ('lodgement_date', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('employee', 'Employee'), ('consultant', 'Consultant')], default='employee', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='QAOfficerGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('members', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, size=None)),
                ('default', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'QA group',
                'verbose_name_plural': 'QA group',
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lodged_on', models.DateTimeField(auto_now_add=True)),
                ('sent_by', models.IntegerField()),
                ('referral', models.IntegerField()),
                ('linked', models.BooleanField(default=False)),
                ('sent_from', models.SmallIntegerField(choices=[(1, 'Sent From Assessor'), (2, 'Sent From Referral')], default=1)),
                ('processing_status', models.CharField(choices=[('with_referral', 'Awaiting'), ('recalled', 'Recalled'), ('completed', 'Completed')], default='with_referral', max_length=30, verbose_name='Processing Status')),
                ('text', models.TextField(blank=True)),
                ('referral_text', models.TextField(blank=True)),
                ('assigned_officer', models.IntegerField()),
            ],
            options={
                'ordering': ('-lodged_on',),
            },
        ),
        migrations.CreateModel(
            name='ReferralRecipientGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('members', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, size=None)),
            ],
            options={
                'verbose_name': 'Referral group',
                'verbose_name_plural': 'Referral groups',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('kimberley', 'Kimberley'), ('pilbara', 'Pilbara'), ('midwest', 'Midwest'), ('goldfields', 'Goldfields'), ('swan', 'Swan'), ('wheatbelt', 'Wheatbelt'), ('southwest', 'South West'), ('warren', 'Warren'), ('southcoast', 'South Coast')], default=None, max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='RequiredDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='None', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scientific_name', models.CharField(default='None', max_length=128)),
                ('common_name', models.CharField(default='None', max_length=128)),
                ('name_currency', models.CharField(default='None', max_length=16)),
                ('image', models.CharField(default='None', max_length=512)),
                ('processing_status', models.CharField(default='None', max_length=512)),
                ('district', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boranga.district')),
                ('group_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.grouptype')),
                ('region', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boranga.region')),
            ],
        ),
        migrations.CreateModel(
            name='SystemMaintenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
            ],
            options={
                'verbose_name_plural': 'System maintenance',
            },
        ),
        migrations.CreateModel(
            name='ThreatCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='None', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='UserSystemSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.IntegerField(unique=True)),
                ('event_training_completed', models.BooleanField(default=False)),
                ('event_training_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'User System Settings',
            },
        ),
        migrations.CreateModel(
            name='ConservationAttributes',
            fields=[
                ('general_management_advice', models.CharField(default='None', max_length=512)),
                ('ecological_attributes', models.CharField(default='None', max_length=512)),
                ('biological_attributes', models.CharField(default='None', max_length=512)),
                ('specific_survey_advice', models.CharField(default='None', max_length=512)),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='boranga.species')),
                ('comments', models.CharField(default='None', max_length=2048)),
            ],
        ),
        migrations.CreateModel(
            name='ConservationStatus',
            fields=[
                ('conservation_list', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='boranga.conservationlist')),
                ('change_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.conservationchangecode')),
                ('conservation_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.conservationcategory')),
                ('conservation_criteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.conservationcriteria')),
            ],
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('department_file_numbers', models.CharField(default='None', max_length=512)),
                ('community_original_area', models.IntegerField(default=-1)),
                ('community_original_area_accuracy', models.IntegerField(default=-1)),
                ('number_of_occurrences', models.IntegerField(default=-1)),
                ('extent_of_occurrences', models.IntegerField(default=-1)),
                ('area_of_occupancy', models.IntegerField(default=-1)),
                ('number_of_iucn_locations', models.IntegerField(default=-1)),
                ('community_original_area_reference', models.CharField(default='None', max_length=512)),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='boranga.species')),
            ],
        ),
        migrations.CreateModel(
            name='Taxonomy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxon', models.CharField(default='None', max_length=512)),
                ('taxon_id', models.IntegerField(default=-1)),
                ('previous_name', models.CharField(default='None', max_length=512)),
                ('family', models.CharField(default='None', max_length=512)),
                ('genus', models.CharField(default='None', max_length=512)),
                ('phylogenetic_group', models.CharField(default='None', max_length=512)),
                ('name_authority', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.nameauthority')),
            ],
        ),
        migrations.CreateModel(
            name='SpeciesDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.CharField(default='None', max_length=512)),
                ('document_description', models.CharField(default='None', max_length=1024)),
                ('date_time', models.DateField(default=datetime.date.today)),
                ('document_category', models.ForeignKey(default='None', on_delete=django.db.models.deletion.CASCADE, to='boranga.documentcategory')),
                ('species', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boranga.species')),
            ],
        ),
        migrations.CreateModel(
            name='SpeciesAttributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_reference', models.CharField(default='None', max_length=128)),
                ('genetic', models.CharField(default='None', max_length=128)),
                ('biology', models.CharField(default='None', max_length=128)),
                ('ecology', models.CharField(default='None', max_length=128)),
                ('fire', models.CharField(default='None', max_length=128)),
                ('disease', models.CharField(default='None', max_length=128)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.species')),
            ],
        ),
        migrations.AddField(
            model_name='species',
            name='taxonomy',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='boranga.taxonomy'),
        ),
        migrations.AddField(
            model_name='referral',
            name='document',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referral_document', to='boranga.referraldocument'),
        ),
        migrations.AddField(
            model_name='referral',
            name='referral_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='boranga_referral_groups', to='boranga.referralrecipientgroup'),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('answer_one', models.CharField(blank=True, max_length=200)),
                ('answer_two', models.CharField(blank=True, max_length=200)),
                ('answer_three', models.CharField(blank=True, max_length=200)),
                ('answer_four', models.CharField(blank=True, max_length=200)),
                ('correct_answer', models.CharField(choices=[('answer_one', 'Answer one'), ('answer_two', 'Answer two'), ('answer_three', 'Answer three'), ('answer_four', 'Answer four')], default='answer_one', max_length=40, verbose_name='Correct Answer')),
                ('application_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='boranga.applicationtype')),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationRequestUserAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('who', models.IntegerField()),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('what', models.TextField()),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to='boranga.organisationrequest')),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationRequestDeclinedDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('officer', models.IntegerField()),
                ('reason', models.TextField(blank=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.organisationrequest')),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationContactDeclinedDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('officer', models.IntegerField()),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.organisationcontact')),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('who', models.IntegerField()),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('what', models.TextField()),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to='boranga.organisation')),
            ],
        ),
        migrations.AddField(
            model_name='district',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.region'),
        ),
        migrations.CreateModel(
            name='ConservationThreat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threat_description', models.CharField(default='None', max_length=512)),
                ('comment', models.CharField(default='None', max_length=512)),
                ('document', models.CharField(default='None', max_length=1024)),
                ('source', models.CharField(default='None', max_length=1024)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.species')),
                ('threat_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.threatcategory')),
            ],
        ),
        migrations.CreateModel(
            name='ConservationPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='None', max_length=512)),
                ('comment', models.CharField(default='None', max_length=512)),
                ('source', models.CharField(default='None', max_length=1024)),
                ('district', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boranga.district')),
                ('region', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boranga.region')),
                ('species', models.ManyToManyField(to='boranga.Species')),
            ],
        ),
        migrations.CreateModel(
            name='CommitteeMeeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('location', models.CharField(max_length=128)),
                ('attendees', models.ManyToManyField(to='boranga.Contact')),
                ('species', models.ManyToManyField(to='boranga.Species')),
            ],
        ),
        migrations.CreateModel(
            name='UserDelegation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.IntegerField()),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.organisation')),
            ],
            options={
                'unique_together': {('organisation', 'user')},
            },
        ),
        migrations.AddField(
            model_name='species',
            name='conservation_status',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='boranga.conservationstatus'),
        ),
        migrations.CreateModel(
            name='OrganisationRequestLogEntry',
            fields=[
                ('communicationslogentry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boranga.communicationslogentry')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comms_logs', to='boranga.organisationrequest')),
            ],
            bases=('boranga.communicationslogentry',),
        ),
        migrations.CreateModel(
            name='OrganisationRequestLogDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('_file', models.FileField(max_length=512, upload_to=boranga.components.organisations.models.update_organisation_request_comms_log_filename)),
                ('log_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='boranga.organisationrequestlogentry')),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationLogEntry',
            fields=[
                ('communicationslogentry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boranga.communicationslogentry')),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comms_logs', to='boranga.organisation')),
            ],
            bases=('boranga.communicationslogentry',),
        ),
        migrations.CreateModel(
            name='OrganisationLogDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('_file', models.FileField(max_length=512, upload_to=boranga.components.organisations.models.update_organisation_comms_log_filename)),
                ('log_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='boranga.organisationlogentry')),
            ],
        ),
        migrations.CreateModel(
            name='HelpPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor.fields.RichTextField()),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('help_type', models.SmallIntegerField(choices=[(1, 'External'), (2, 'Internal')], default=1, verbose_name='Help Type')),
                ('version', models.SmallIntegerField(default=1)),
                ('application_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='boranga.applicationtype')),
            ],
            options={
                'unique_together': {('application_type', 'help_type', 'version')},
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community_name', models.CharField(default='None', max_length=2048)),
                ('community_id', models.IntegerField(default=-1)),
                ('community_status', models.CharField(default='None', max_length=128)),
                ('district', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boranga.district')),
                ('group_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boranga.grouptype')),
                ('region', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boranga.region')),
                ('species', models.ManyToManyField(to='boranga.Species')),
                ('conservation_status', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='boranga.conservationstatus')),
            ],
        ),
    ]
